local utf8 = require "main.modules.utf8" --модуль для работы с русскими символами
local node = require "main.modules.node" --модуль для создания node элементов

local function getMinimumUniqueLetters(words)
	local maxLetterCounts = {}

	-- Проходим по каждому слову в массиве
	for _, word in ipairs(words) do
		local letterCounts = {}
		local text_length = utf8.len(word)
		
		-- Считаем количество каждой буквы в текущем слове
		for i = 1, text_length do
			local char = utf8.sub(word, i, 1)
			if not letterCounts[char] then
				letterCounts[char] = 0
			end
			letterCounts[char] = letterCounts[char] + 1
		end

		-- Обновляем максимальные количества букв
		for letter, count in pairs(letterCounts) do
			if not maxLetterCounts[letter] or count > maxLetterCounts[letter] then
				maxLetterCounts[letter] = count
			end
		end
	end

	local resultLetters = {}

	-- Формируем результирующий массив
	for letter, count in pairs(maxLetterCounts) do
		for i = 1, count do
			table.insert(resultLetters, letter)
		end
	end

	return resultLetters
end


local function generate_ui(data) 
	local words_number = #data
	local size = 250 / words_number
	local start_x = size / 2
	local start_y = (size * words_number / 2) - size
	
	local x
	local y = start_y

	local spacing_x = size + 4
	local spacing_y = size + 4
	
	for index, word in ipairs(data) do
		local text_length = utf8.len(word)
		
		x = -((spacing_x + size) * text_length / 2) / 2 + start_x

		for i = 1, text_length do
			local char = utf8.sub(word, i, 1)
			
			node.create_cell(char, word, size, x, y)
			
			x = x + spacing_x
		end

		y = y - spacing_y
	end

	local uniqueLetters = getMinimumUniqueLetters(data)
	node.create_ring_cells(uniqueLetters)
end

local function readLevelFile(self)
	local level_number = ((self.level - 1) % 3) + 1
	-- Load level data into a string
	local data, error = sys.load_resource("/main/levels/" .. level_number .. ".json")
	-- Decode json string to a Lua table
	if data then
		local data_table = json.decode(data)
		generate_ui(data_table.words)
	else
		print(error)
	end
end

function init(self)
	self.level = 3
	readLevelFile(self)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
